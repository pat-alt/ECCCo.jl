---
format: pdf
---

# Plots

```{julia}
using Pkg; Pkg.activate("experiments")
include("$(pwd())/experiments/setup_env.jl")
```

## Counterfactual Path - MNIST

```{julia}
data_name = "mnist"
plt_order = ["MLP", "MLP Ensemble", "LeNet-5", "JEM", "JEM Ensemble"]
fixed_factual = 3
fixed_target = 9
models = Serialization.deserialize("models/$(data_name)_models.jls")
data = eval(Meta.parse("load_$(data_name)()"))
plt_order = plt_order[[x in collect(keys(models)) for x in plt_order]]
```

```{julia}
using Plots.PlotMeasures
n_samp = 100
n_rand = 500
σ = 0.1
plts = []
for (mod_name, model) in models
    Δ = []
    L = []
    for i in 1:n_rand
        factual = isnothing(fixed_factual) ? rand(data.y_levels) : fixed_factual
        target = isnothing(fixed_target) ? rand(data.y_levels[data.y_levels .!= factual]) : fixed_target
        t = get_target_index(data.y_levels, target)
        E(x) = -logits(model, x)[t, :]
        x_samp = data.X[:,rand(findall(data.output_encoder.labels.==target),n_samp)]
        x_rand = data.X[:,rand(findall(data.output_encoder.labels.==factual),1)]
        x_rand .+= Float32.(randn(size(x_samp,1),1)) .* σ
        δ = mean(map(y -> norm(x_rand.-y),eachcol(x_samp)))
        push!(Δ,δ)
        l = E(x_rand)[1]
        push!(L,l)
    end
    plt = scatter(
        Δ, L;
        label="", title=mod_name, smooth=:true,
        lc=:red, lw=2
    )
    push!(plts, plt)
end
width = 1000
plt = plot(
    plts[sortperm(collect(keys(models)))[invperm(sortperm(plt_order))]]..., 
    layout=(1,length(models)), size=(width,round(1.0width)/length(models)),
    ticks=false
)
savefig(plt, "www/dist_energy.png")
```