```{julia}
using CCE
using ConformalPrediction
using CounterfactualExplanations
using CounterfactualExplanations.Data
using CounterfactualExplanations.Objectives
using Distributions
using Flux
using JointEnergyModels
using LinearAlgebra
using MLJBase
using MLJFlux
using Plots
```

# Fidelity Measures

## Binary

```{julia}
# Setup
counterfactual_data = load_linearly_separable()
M = fit_model(counterfactual_data, :DeepEnsemble)
target = 2
factual = 1
chosen = rand(findall(predict_label(M, counterfactual_data) .== factual))
x = select_factual(counterfactual_data, chosen)

# Search:
generator = GenericGenerator(opt=Descent(0.01))
ce = generate_counterfactual(x, target, counterfactual_data, M, generator)
```

```{julia}
niter = 100
nsamples = 100

sampler = CCE.EnergySampler(ce;niter=niter, nsamples=100)
Xgen = rand(sampler, nsamples)
plt = plot(M, counterfactual_data, target=ce.target, xlims=(-5,5),ylims=(-5,5),cbar=false)
scatter!(Xgen[1,:],Xgen[2,:],alpha=0.5,color=target,shape=:star,label="X|y=$target")
```

## Multi-Class

```{julia}
# Setup
counterfactual_data = load_multi_class()
M = fit_model(counterfactual_data, :DeepEnsemble)
target = 4
factual = 2
chosen = rand(findall(predict_label(M, counterfactual_data) .== factual))
x = select_factual(counterfactual_data, chosen)

# Search:
generator = GenericGenerator(opt=Descent(0.01))
ce = generate_counterfactual(x, target, counterfactual_data, M, generator)
```

```{julia}
niter = 100
nsamples = 100

sampler = CCE.EnergySampler(ce;niter=niter, nsamples=100)
Xgen = rand(sampler, nsamples)
plt = plot(M, counterfactual_data, target=ce.target, xlims=(-5,5),ylims=(-5,5),cbar=false)
scatter!(Xgen[1,:],Xgen[2,:],alpha=0.5,color=target,shape=:star,label="X|y=$target")
```

```{julia}
p1 = plot(ce)
```


```{julia}
using CCE: distance_from_energy
@objective(generator, _ + 0.1distance_l2 + 10.0distance_from_energy)
ce = generate_counterfactual(x, target, counterfactual_data, M, generator)
p2 = plot(ce)
```


```{julia}
using CCE: distance_from_targets
@objective(
    generator, 
    _ + 0.1distance_l2 + 1.0distance_from_energy + 10.0distance_from_targets
)
ce = generate_counterfactual(x, target, counterfactual_data, M, generator)
p3 = plot(ce)
```