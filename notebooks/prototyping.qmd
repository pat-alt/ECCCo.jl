```{julia}
include("$(pwd())/experiments/setup_env.jl")
```

# Linearly Separable Data

```{julia}
dataname = "linearly_separable"
outcome = Serialization.deserialize(joinpath(DEFAULT_OUTPUT_PATH, "$(dataname)_outcome.jls"))

# Unpack
exper = outcome.exper
model_dict = outcome.model_dict
generator_dict = outcome.generator_dict
bmk = outcome.bmk
```

```{julia}
Random.seed!(2023)

# Unpack
counterfactual_data = exper.counterfactual_data
X, labels = counterfactual_data.X, counterfactual_data.output_encoder.labels
M = model_dict["MLP"]
gen = filter(((k,v),) -> k in ["ECCCo", "ECCCo-Δ"], generator_dict)

# Prepare search:
X = X isa Matrix ? X : Float32.(permutedims(matrix(X)))
factual_label =  levels(labels)[2]
x_factual = X[:,rand(findall(predict_label(M, counterfactual_data).==factual_label))] |>
    x -> x[:,:]
target =  levels(labels)[1]
factual = predict_label(M, counterfactual_data, x_factual)[1]

ces = Dict{Any,Any}()
plts = []
for (name, generator) in gen
    ce = generate_counterfactual(
        x_factual, target, counterfactual_data, M, generator;
        initialization=:identity, 
        converge_when=:generator_conditions,
    )
    plt = Plots.plot(
        ce, title=name, alpha=0.2, 
        cbar=false, 
    )
    if contains(name, "ECCCo")
        _X = distance_from_energy(ce, return_conditionals=true)
        Plots.scatter!(
            _X[1,:],_X[2,:], color=:purple, shape=:star5, 
            ms=10, label="x̂|$target", alpha=0.5
        )
    end
    push!(plts, plt)
    ces[name] = ce
end
plt = Plots.plot(plts..., size=(800,350))
display(plt)
```